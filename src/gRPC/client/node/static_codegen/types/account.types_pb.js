// source: src/gRPC/server/proto/types/account.types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.account.types.AmojoRights', null, global);
goog.exportSymbol('proto.account.types.DatetimeSettings', null, global);
goog.exportSymbol('proto.account.types.Embedded', null, global);
goog.exportSymbol('proto.account.types.Entity', null, global);
goog.exportSymbol('proto.account.types.EntityNames', null, global);
goog.exportSymbol('proto.account.types.Form', null, global);
goog.exportSymbol('proto.account.types.Lang', null, global);
goog.exportSymbol('proto.account.types.TaskType', null, global);
goog.exportSymbol('proto.account.types.UserGroup', null, global);
goog.exportSymbol('proto.account.types.invoicesSettings', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.Form = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.types.Form, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.Form.displayName = 'proto.account.types.Form';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.Lang = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.types.Lang, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.Lang.displayName = 'proto.account.types.Lang';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.types.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.Entity.displayName = 'proto.account.types.Entity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.AmojoRights = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.types.AmojoRights, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.AmojoRights.displayName = 'proto.account.types.AmojoRights';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.UserGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.types.UserGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.UserGroup.displayName = 'proto.account.types.UserGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.TaskType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.types.TaskType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.TaskType.displayName = 'proto.account.types.TaskType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.DatetimeSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.types.DatetimeSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.DatetimeSettings.displayName = 'proto.account.types.DatetimeSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.EntityNames = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.types.EntityNames, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.EntityNames.displayName = 'proto.account.types.EntityNames';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.invoicesSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.types.invoicesSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.invoicesSettings.displayName = 'proto.account.types.invoicesSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.types.Embedded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.account.types.Embedded.repeatedFields_, null);
};
goog.inherits(proto.account.types.Embedded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.types.Embedded.displayName = 'proto.account.types.Embedded';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.Form.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.Form.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.Form} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.Form.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_default: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accusative: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dative: jspb.Message.getFieldWithDefault(msg, 3, ""),
    genitive: jspb.Message.getFieldWithDefault(msg, 4, ""),
    instrumental: jspb.Message.getFieldWithDefault(msg, 5, ""),
    prepositional: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.Form}
 */
proto.account.types.Form.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.Form;
  return proto.account.types.Form.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.Form} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.Form}
 */
proto.account.types.Form.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefault(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccusative(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDative(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGenitive(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstrumental(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrepositional(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.Form.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.Form.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.Form} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.Form.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefault();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string default = 1;
 * @return {string}
 */
proto.account.types.Form.prototype.getDefault = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.setDefault = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accusative = 2;
 * @return {string}
 */
proto.account.types.Form.prototype.getAccusative = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.setAccusative = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.clearAccusative = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Form.prototype.hasAccusative = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string dative = 3;
 * @return {string}
 */
proto.account.types.Form.prototype.getDative = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.setDative = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.clearDative = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Form.prototype.hasDative = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string genitive = 4;
 * @return {string}
 */
proto.account.types.Form.prototype.getGenitive = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.setGenitive = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.clearGenitive = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Form.prototype.hasGenitive = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string instrumental = 5;
 * @return {string}
 */
proto.account.types.Form.prototype.getInstrumental = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.setInstrumental = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.clearInstrumental = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Form.prototype.hasInstrumental = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string prepositional = 6;
 * @return {string}
 */
proto.account.types.Form.prototype.getPrepositional = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.setPrepositional = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.account.types.Form} returns this
 */
proto.account.types.Form.prototype.clearPrepositional = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Form.prototype.hasPrepositional = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.Lang.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.Lang.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.Lang} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.Lang.toObject = function(includeInstance, msg) {
  var f, obj = {
    gender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pluralForm: (f = msg.getPluralForm()) && proto.account.types.Form.toObject(includeInstance, f),
    singularForm: (f = msg.getSingularForm()) && proto.account.types.Form.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.Lang}
 */
proto.account.types.Lang.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.Lang;
  return proto.account.types.Lang.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.Lang} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.Lang}
 */
proto.account.types.Lang.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGender(value);
      break;
    case 2:
      var value = new proto.account.types.Form;
      reader.readMessage(value,proto.account.types.Form.deserializeBinaryFromReader);
      msg.setPluralForm(value);
      break;
    case 3:
      var value = new proto.account.types.Form;
      reader.readMessage(value,proto.account.types.Form.deserializeBinaryFromReader);
      msg.setSingularForm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.Lang.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.Lang.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.Lang} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.Lang.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPluralForm();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.account.types.Form.serializeBinaryToWriter
    );
  }
  f = message.getSingularForm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.account.types.Form.serializeBinaryToWriter
    );
  }
};


/**
 * optional string gender = 1;
 * @return {string}
 */
proto.account.types.Lang.prototype.getGender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.Lang} returns this
 */
proto.account.types.Lang.prototype.setGender = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Form plural_form = 2;
 * @return {?proto.account.types.Form}
 */
proto.account.types.Lang.prototype.getPluralForm = function() {
  return /** @type{?proto.account.types.Form} */ (
    jspb.Message.getWrapperField(this, proto.account.types.Form, 2));
};


/**
 * @param {?proto.account.types.Form|undefined} value
 * @return {!proto.account.types.Lang} returns this
*/
proto.account.types.Lang.prototype.setPluralForm = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.Lang} returns this
 */
proto.account.types.Lang.prototype.clearPluralForm = function() {
  return this.setPluralForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Lang.prototype.hasPluralForm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Form singular_form = 3;
 * @return {?proto.account.types.Form}
 */
proto.account.types.Lang.prototype.getSingularForm = function() {
  return /** @type{?proto.account.types.Form} */ (
    jspb.Message.getWrapperField(this, proto.account.types.Form, 3));
};


/**
 * @param {?proto.account.types.Form|undefined} value
 * @return {!proto.account.types.Lang} returns this
*/
proto.account.types.Lang.prototype.setSingularForm = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.Lang} returns this
 */
proto.account.types.Lang.prototype.clearSingularForm = function() {
  return this.setSingularForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Lang.prototype.hasSingularForm = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    en: (f = msg.getEn()) && proto.account.types.Lang.toObject(includeInstance, f),
    es: (f = msg.getEs()) && proto.account.types.Lang.toObject(includeInstance, f),
    pr: (f = msg.getPr()) && proto.account.types.Lang.toObject(includeInstance, f),
    ru: (f = msg.getRu()) && proto.account.types.Lang.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.Entity}
 */
proto.account.types.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.Entity;
  return proto.account.types.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.Entity}
 */
proto.account.types.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.account.types.Lang;
      reader.readMessage(value,proto.account.types.Lang.deserializeBinaryFromReader);
      msg.setEn(value);
      break;
    case 2:
      var value = new proto.account.types.Lang;
      reader.readMessage(value,proto.account.types.Lang.deserializeBinaryFromReader);
      msg.setEs(value);
      break;
    case 3:
      var value = new proto.account.types.Lang;
      reader.readMessage(value,proto.account.types.Lang.deserializeBinaryFromReader);
      msg.setPr(value);
      break;
    case 4:
      var value = new proto.account.types.Lang;
      reader.readMessage(value,proto.account.types.Lang.deserializeBinaryFromReader);
      msg.setRu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.account.types.Lang.serializeBinaryToWriter
    );
  }
  f = message.getEs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.account.types.Lang.serializeBinaryToWriter
    );
  }
  f = message.getPr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.account.types.Lang.serializeBinaryToWriter
    );
  }
  f = message.getRu();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.account.types.Lang.serializeBinaryToWriter
    );
  }
};


/**
 * optional Lang en = 1;
 * @return {?proto.account.types.Lang}
 */
proto.account.types.Entity.prototype.getEn = function() {
  return /** @type{?proto.account.types.Lang} */ (
    jspb.Message.getWrapperField(this, proto.account.types.Lang, 1));
};


/**
 * @param {?proto.account.types.Lang|undefined} value
 * @return {!proto.account.types.Entity} returns this
*/
proto.account.types.Entity.prototype.setEn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.Entity} returns this
 */
proto.account.types.Entity.prototype.clearEn = function() {
  return this.setEn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Entity.prototype.hasEn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Lang es = 2;
 * @return {?proto.account.types.Lang}
 */
proto.account.types.Entity.prototype.getEs = function() {
  return /** @type{?proto.account.types.Lang} */ (
    jspb.Message.getWrapperField(this, proto.account.types.Lang, 2));
};


/**
 * @param {?proto.account.types.Lang|undefined} value
 * @return {!proto.account.types.Entity} returns this
*/
proto.account.types.Entity.prototype.setEs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.Entity} returns this
 */
proto.account.types.Entity.prototype.clearEs = function() {
  return this.setEs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Entity.prototype.hasEs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Lang pr = 3;
 * @return {?proto.account.types.Lang}
 */
proto.account.types.Entity.prototype.getPr = function() {
  return /** @type{?proto.account.types.Lang} */ (
    jspb.Message.getWrapperField(this, proto.account.types.Lang, 3));
};


/**
 * @param {?proto.account.types.Lang|undefined} value
 * @return {!proto.account.types.Entity} returns this
*/
proto.account.types.Entity.prototype.setPr = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.Entity} returns this
 */
proto.account.types.Entity.prototype.clearPr = function() {
  return this.setPr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Entity.prototype.hasPr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Lang ru = 4;
 * @return {?proto.account.types.Lang}
 */
proto.account.types.Entity.prototype.getRu = function() {
  return /** @type{?proto.account.types.Lang} */ (
    jspb.Message.getWrapperField(this, proto.account.types.Lang, 4));
};


/**
 * @param {?proto.account.types.Lang|undefined} value
 * @return {!proto.account.types.Entity} returns this
*/
proto.account.types.Entity.prototype.setRu = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.Entity} returns this
 */
proto.account.types.Entity.prototype.clearRu = function() {
  return this.setRu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Entity.prototype.hasRu = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.AmojoRights.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.AmojoRights.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.AmojoRights} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.AmojoRights.toObject = function(includeInstance, msg) {
  var f, obj = {
    canDirect: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    canCreateGroups: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.AmojoRights}
 */
proto.account.types.AmojoRights.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.AmojoRights;
  return proto.account.types.AmojoRights.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.AmojoRights} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.AmojoRights}
 */
proto.account.types.AmojoRights.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanDirect(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanCreateGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.AmojoRights.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.AmojoRights.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.AmojoRights} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.AmojoRights.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCanDirect();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCanCreateGroups();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool can_direct = 1;
 * @return {boolean}
 */
proto.account.types.AmojoRights.prototype.getCanDirect = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.account.types.AmojoRights} returns this
 */
proto.account.types.AmojoRights.prototype.setCanDirect = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool can_create_groups = 2;
 * @return {boolean}
 */
proto.account.types.AmojoRights.prototype.getCanCreateGroups = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.account.types.AmojoRights} returns this
 */
proto.account.types.AmojoRights.prototype.setCanCreateGroups = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.UserGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.UserGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.UserGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.UserGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.UserGroup}
 */
proto.account.types.UserGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.UserGroup;
  return proto.account.types.UserGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.UserGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.UserGroup}
 */
proto.account.types.UserGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.UserGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.UserGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.UserGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.UserGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.account.types.UserGroup.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.types.UserGroup} returns this
 */
proto.account.types.UserGroup.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.account.types.UserGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.UserGroup} returns this
 */
proto.account.types.UserGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.TaskType.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.TaskType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.TaskType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.TaskType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    color: jspb.Message.getFieldWithDefault(msg, 3, ""),
    iconId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    code: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.TaskType}
 */
proto.account.types.TaskType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.TaskType;
  return proto.account.types.TaskType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.TaskType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.TaskType}
 */
proto.account.types.TaskType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIconId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.TaskType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.TaskType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.TaskType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.TaskType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIconId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.account.types.TaskType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.types.TaskType} returns this
 */
proto.account.types.TaskType.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.account.types.TaskType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.TaskType} returns this
 */
proto.account.types.TaskType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.account.types.TaskType.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.TaskType} returns this
 */
proto.account.types.TaskType.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 icon_id = 4;
 * @return {number}
 */
proto.account.types.TaskType.prototype.getIconId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.types.TaskType} returns this
 */
proto.account.types.TaskType.prototype.setIconId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string code = 5;
 * @return {string}
 */
proto.account.types.TaskType.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.TaskType} returns this
 */
proto.account.types.TaskType.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.DatetimeSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.DatetimeSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.DatetimeSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.DatetimeSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    dateFormat: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datePattern: jspb.Message.getFieldWithDefault(msg, 2, ""),
    shortDatePattern: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shortTimePattern: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timeFormat: jspb.Message.getFieldWithDefault(msg, 5, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 6, ""),
    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.DatetimeSettings}
 */
proto.account.types.DatetimeSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.DatetimeSettings;
  return proto.account.types.DatetimeSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.DatetimeSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.DatetimeSettings}
 */
proto.account.types.DatetimeSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateFormat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatePattern(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortDatePattern(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortTimePattern(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeFormat(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezoneOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.DatetimeSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.DatetimeSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.DatetimeSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.DatetimeSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDateFormat();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatePattern();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getShortDatePattern();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getShortTimePattern();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimeFormat();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTimezoneOffset();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string date_format = 1;
 * @return {string}
 */
proto.account.types.DatetimeSettings.prototype.getDateFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.DatetimeSettings} returns this
 */
proto.account.types.DatetimeSettings.prototype.setDateFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string date_pattern = 2;
 * @return {string}
 */
proto.account.types.DatetimeSettings.prototype.getDatePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.DatetimeSettings} returns this
 */
proto.account.types.DatetimeSettings.prototype.setDatePattern = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string short_date_pattern = 3;
 * @return {string}
 */
proto.account.types.DatetimeSettings.prototype.getShortDatePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.DatetimeSettings} returns this
 */
proto.account.types.DatetimeSettings.prototype.setShortDatePattern = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string short_time_pattern = 4;
 * @return {string}
 */
proto.account.types.DatetimeSettings.prototype.getShortTimePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.DatetimeSettings} returns this
 */
proto.account.types.DatetimeSettings.prototype.setShortTimePattern = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string time_format = 5;
 * @return {string}
 */
proto.account.types.DatetimeSettings.prototype.getTimeFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.DatetimeSettings} returns this
 */
proto.account.types.DatetimeSettings.prototype.setTimeFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string timezone = 6;
 * @return {string}
 */
proto.account.types.DatetimeSettings.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.DatetimeSettings} returns this
 */
proto.account.types.DatetimeSettings.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string timezone_offset = 7;
 * @return {string}
 */
proto.account.types.DatetimeSettings.prototype.getTimezoneOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.DatetimeSettings} returns this
 */
proto.account.types.DatetimeSettings.prototype.setTimezoneOffset = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.EntityNames.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.EntityNames.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.EntityNames} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.EntityNames.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoices: (f = msg.getInvoices()) && proto.account.types.Entity.toObject(includeInstance, f),
    leads: (f = msg.getLeads()) && proto.account.types.Entity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.EntityNames}
 */
proto.account.types.EntityNames.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.EntityNames;
  return proto.account.types.EntityNames.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.EntityNames} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.EntityNames}
 */
proto.account.types.EntityNames.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.account.types.Entity;
      reader.readMessage(value,proto.account.types.Entity.deserializeBinaryFromReader);
      msg.setInvoices(value);
      break;
    case 2:
      var value = new proto.account.types.Entity;
      reader.readMessage(value,proto.account.types.Entity.deserializeBinaryFromReader);
      msg.setLeads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.EntityNames.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.EntityNames.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.EntityNames} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.EntityNames.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoices();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.account.types.Entity.serializeBinaryToWriter
    );
  }
  f = message.getLeads();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.account.types.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Entity invoices = 1;
 * @return {?proto.account.types.Entity}
 */
proto.account.types.EntityNames.prototype.getInvoices = function() {
  return /** @type{?proto.account.types.Entity} */ (
    jspb.Message.getWrapperField(this, proto.account.types.Entity, 1));
};


/**
 * @param {?proto.account.types.Entity|undefined} value
 * @return {!proto.account.types.EntityNames} returns this
*/
proto.account.types.EntityNames.prototype.setInvoices = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.EntityNames} returns this
 */
proto.account.types.EntityNames.prototype.clearInvoices = function() {
  return this.setInvoices(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.EntityNames.prototype.hasInvoices = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Entity leads = 2;
 * @return {?proto.account.types.Entity}
 */
proto.account.types.EntityNames.prototype.getLeads = function() {
  return /** @type{?proto.account.types.Entity} */ (
    jspb.Message.getWrapperField(this, proto.account.types.Entity, 2));
};


/**
 * @param {?proto.account.types.Entity|undefined} value
 * @return {!proto.account.types.EntityNames} returns this
*/
proto.account.types.EntityNames.prototype.setLeads = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.EntityNames} returns this
 */
proto.account.types.EntityNames.prototype.clearLeads = function() {
  return this.setLeads(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.EntityNames.prototype.hasLeads = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.invoicesSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.invoicesSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.invoicesSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.invoicesSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    lang: jspb.Message.getFieldWithDefault(msg, 1, ""),
    invoicesCatalogId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.invoicesSettings}
 */
proto.account.types.invoicesSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.invoicesSettings;
  return proto.account.types.invoicesSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.invoicesSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.invoicesSettings}
 */
proto.account.types.invoicesSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvoicesCatalogId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.invoicesSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.invoicesSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.invoicesSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.invoicesSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLang();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInvoicesCatalogId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string lang = 1;
 * @return {string}
 */
proto.account.types.invoicesSettings.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.types.invoicesSettings} returns this
 */
proto.account.types.invoicesSettings.prototype.setLang = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 invoices_catalog_id = 2;
 * @return {number}
 */
proto.account.types.invoicesSettings.prototype.getInvoicesCatalogId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.types.invoicesSettings} returns this
 */
proto.account.types.invoicesSettings.prototype.setInvoicesCatalogId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.account.types.Embedded.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.types.Embedded.prototype.toObject = function(opt_includeInstance) {
  return proto.account.types.Embedded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.types.Embedded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.Embedded.toObject = function(includeInstance, msg) {
  var f, obj = {
    amojoRights: (f = msg.getAmojoRights()) && proto.account.types.AmojoRights.toObject(includeInstance, f),
    userGroupsList: jspb.Message.toObjectList(msg.getUserGroupsList(),
    proto.account.types.UserGroup.toObject, includeInstance),
    taskTypesList: jspb.Message.toObjectList(msg.getTaskTypesList(),
    proto.account.types.TaskType.toObject, includeInstance),
    datetimeSettings: (f = msg.getDatetimeSettings()) && proto.account.types.DatetimeSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.types.Embedded}
 */
proto.account.types.Embedded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.types.Embedded;
  return proto.account.types.Embedded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.types.Embedded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.types.Embedded}
 */
proto.account.types.Embedded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.account.types.AmojoRights;
      reader.readMessage(value,proto.account.types.AmojoRights.deserializeBinaryFromReader);
      msg.setAmojoRights(value);
      break;
    case 2:
      var value = new proto.account.types.UserGroup;
      reader.readMessage(value,proto.account.types.UserGroup.deserializeBinaryFromReader);
      msg.addUserGroups(value);
      break;
    case 3:
      var value = new proto.account.types.TaskType;
      reader.readMessage(value,proto.account.types.TaskType.deserializeBinaryFromReader);
      msg.addTaskTypes(value);
      break;
    case 4:
      var value = new proto.account.types.DatetimeSettings;
      reader.readMessage(value,proto.account.types.DatetimeSettings.deserializeBinaryFromReader);
      msg.setDatetimeSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.types.Embedded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.types.Embedded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.types.Embedded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.types.Embedded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmojoRights();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.account.types.AmojoRights.serializeBinaryToWriter
    );
  }
  f = message.getUserGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.account.types.UserGroup.serializeBinaryToWriter
    );
  }
  f = message.getTaskTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.account.types.TaskType.serializeBinaryToWriter
    );
  }
  f = message.getDatetimeSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.account.types.DatetimeSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional AmojoRights amojo_rights = 1;
 * @return {?proto.account.types.AmojoRights}
 */
proto.account.types.Embedded.prototype.getAmojoRights = function() {
  return /** @type{?proto.account.types.AmojoRights} */ (
    jspb.Message.getWrapperField(this, proto.account.types.AmojoRights, 1));
};


/**
 * @param {?proto.account.types.AmojoRights|undefined} value
 * @return {!proto.account.types.Embedded} returns this
*/
proto.account.types.Embedded.prototype.setAmojoRights = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.Embedded} returns this
 */
proto.account.types.Embedded.prototype.clearAmojoRights = function() {
  return this.setAmojoRights(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Embedded.prototype.hasAmojoRights = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UserGroup user_groups = 2;
 * @return {!Array<!proto.account.types.UserGroup>}
 */
proto.account.types.Embedded.prototype.getUserGroupsList = function() {
  return /** @type{!Array<!proto.account.types.UserGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.account.types.UserGroup, 2));
};


/**
 * @param {!Array<!proto.account.types.UserGroup>} value
 * @return {!proto.account.types.Embedded} returns this
*/
proto.account.types.Embedded.prototype.setUserGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.account.types.UserGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.account.types.UserGroup}
 */
proto.account.types.Embedded.prototype.addUserGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.account.types.UserGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.account.types.Embedded} returns this
 */
proto.account.types.Embedded.prototype.clearUserGroupsList = function() {
  return this.setUserGroupsList([]);
};


/**
 * repeated TaskType task_types = 3;
 * @return {!Array<!proto.account.types.TaskType>}
 */
proto.account.types.Embedded.prototype.getTaskTypesList = function() {
  return /** @type{!Array<!proto.account.types.TaskType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.account.types.TaskType, 3));
};


/**
 * @param {!Array<!proto.account.types.TaskType>} value
 * @return {!proto.account.types.Embedded} returns this
*/
proto.account.types.Embedded.prototype.setTaskTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.account.types.TaskType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.account.types.TaskType}
 */
proto.account.types.Embedded.prototype.addTaskTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.account.types.TaskType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.account.types.Embedded} returns this
 */
proto.account.types.Embedded.prototype.clearTaskTypesList = function() {
  return this.setTaskTypesList([]);
};


/**
 * optional DatetimeSettings datetime_settings = 4;
 * @return {?proto.account.types.DatetimeSettings}
 */
proto.account.types.Embedded.prototype.getDatetimeSettings = function() {
  return /** @type{?proto.account.types.DatetimeSettings} */ (
    jspb.Message.getWrapperField(this, proto.account.types.DatetimeSettings, 4));
};


/**
 * @param {?proto.account.types.DatetimeSettings|undefined} value
 * @return {!proto.account.types.Embedded} returns this
*/
proto.account.types.Embedded.prototype.setDatetimeSettings = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.types.Embedded} returns this
 */
proto.account.types.Embedded.prototype.clearDatetimeSettings = function() {
  return this.setDatetimeSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.types.Embedded.prototype.hasDatetimeSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.account.types);
